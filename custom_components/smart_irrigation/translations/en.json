{
  "config": {
    "abort": {
      "single_instance_allowed": "Only a single configuration of Smart Irrigation is allowed."
    },
    "error": {
      "auth": "Weather service API key incorrect",
      "name": "Specify an unique name for the integration."
    },
    "step": {
      "user": {
        "title": "General set up",
        "description": "If you need help with the configuration, please see https://github.com/jeroenterheerdt/HASmartIrrigation",
        "data": {
          "name": "Unique name of the integration",
          "use_weather_service": "Use a weather service (Open Weather Map, Pirate Weather, or KNMI) for weather data or forecasting. Enable this option if you intent to use one of the supported weather services for at least part of the weather data, including forecasting. Disable this option if you want to use another source, such as your own weather station, exclusively. In this case, Smart Irigation will not be able to use forecasts."
        }
      },
      "step1": {
        "title": "Weather service API set up",
        "description": "If you need help with the configuration, please see https://github.com/jeroenterheerdt/HASmartIrrigation",
        "data": {
          "weather_service": "Weather service to use",
          "weather_service_api_key": "API key for weather service",
          "weather_service_api_version": "Weather service API version"
        }
      }
    }
  },
  "options": {
    "error": {
      "auth": "Weather service API key or version incorrect"
    },
    "step": {
      "init": {
        "title": "Weather service API set up",
        "description": "If you need help with the configuration, please see https://github.com/jeroenterheerdt/HASmartIrrigation",
        "data": {
          "use_weather_service": "Use a weather service (Open Weather Map, Pirate Weather, or KNMI) for weather data or forecasting. Enable this option if you intent to use one of the supported weather services for at least part of the weather data, including forecasting. Disable this option if you want to use another source, such as your own weather station, exclusively. In this case, Smart Irigation will not be able to use forecasts."
        }
      },
      "step1": {
        "title": "Weather service API set up",
        "description": "If you need help with the configuration, please see https://github.com/jeroenterheerdt/HASmartIrrigation",
        "data": {
          "weather_service": "Weather service to use",
          "weather_service_api_key": "API key for weather service",
          "weather_service_api_version": "Weather service API version"
        }
      }
    }
  },
  "services": {
    "calculate_all_zones": {
      "name": "Calculate all zones",
      "description": "Calculate all zones in automatic mode",
      "fields":{
        "delete_weather_data": {
          "name": "Delete weather data",
          "description": "Delete weather data after calculation"
        }
      }
    },
    "calculate_zone": {
      "name": "Calculate zone",
      "description": "Calculate specified zone",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to calculate"
        },
        "delete_weather_data": {
          "name": "Delete weather data",
          "description": "Delete weather data for the zone after calculation"
        }
      }
    },
    "update_all_zones": {
      "name": "Update all zones",
      "description": "Update weatherdata for all zones in automatic mode"
    },
    "update_zone": {
      "name": "Update zone",
      "description": "Update weatherdata for specified zone",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to update"
        }
      }
    },
    "set_bucket": {
      "name": "Set bucket",
      "description": "Set bucket for a zone to a specific value",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to set bucket for"
        },
        "new_bucket_value": {
          "name": "New bucket value",
          "description": "new value of the bucket"
        }
      }
    },
    "set_all_buckets": {
      "name": "Set all buckets",
      "description": "Set buckets for all zones to a specific value",
      "fields": {
        "new_bucket_value": {
          "name": "New bucket value",
          "description": "new value of the bucket"
        }
      }
    },
    "reset_bucket": {
      "name": "Reset bucket",
      "description": "Reset bucket for a zone to 0",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to reset bucket for"
        }
      }
    },
    "reset_all_buckets": {
      "name": "Reset all buckets",
      "description": "Reset bucket for all zones to 0"
    },
    "clear_all_weather_data": {
      "name": "Clear all weather data",
      "description": "Clear weather data for all zones"
    },
    "set_multiplier": {
      "name": "Set multiplier",
      "description": "Set multiplier for a zone to a specific value",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to set multiplier for"
        },
        "new_multiplier_value": {
          "name": "New multiplier value",
          "description": "new value of the multiplier"
        }
      }
    },
    "set_all_multipliers": {
      "name": "Set all multipliers",
      "description": "Set multipliers for all zones to a specific value",
      "fields": {
        "new_multiplier_value": {
          "name": "New multiplier value",
          "description": "new value of the multiplier"
        }
      }
    },
    "set_state": {
      "name": "Set the state of a zone",
      "description": "Set the state of a zone to a specific value",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to set state for"
        },
        "new_state_value": {
          "name": "New state value",
          "description": "New value of the state"
        }
      }
    },
    "set_zone": {
      "name": "Set the values of a zone",
      "description": "Set all configurable values of a zone",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to set configuration values"
        },
        "new_bucket_value": {
          "name": "New bucket value",
          "description": "New value for the bucket"
        },
        "new_multiplier_value": {
          "name": "New multiplier value",
          "description": "New value for the multiplier"
        },
        "new_duration_value": {
          "name": "New duration value",
          "description": "New value for the duration"
        },
        "new_state_value": {
          "name": "New state value",
          "description": "New value of the state"
        },
        "new_throughput_value": {
          "name": "New throughput value",
          "description": "New value for the throughput"
        }
      }
    },
    "generate_watering_calendar": {
      "name": "Generate watering calendar",
      "description": "Generate a 12-month watering calendar for irrigation zones based on representative climate data",
      "fields": {
        "entity": {
          "name": "Entity",
          "description": "Zone to generate watering calendar for"
        }
      }
    }
  },
  "irrigation_start_triggers": {
    "title": "Irrigation Start Triggers",
    "description": "Configure when irrigation should start based on solar events. You can add multiple triggers for different schedules. For sunrise triggers, leaving offset at 0 will automatically use the total duration of all enabled zones.",
    "add_trigger": "Add Trigger",
    "edit_trigger": "Edit Trigger", 
    "delete_trigger": "Delete Trigger",
    "trigger_types": {
      "sunrise": "Sunrise",
      "sunset": "Sunset", 
      "solar_azimuth": "Solar Azimuth"
    },
    "fields": {
      "name": {
        "name": "Trigger Name",
        "description": "A descriptive name to identify this trigger"
      },
      "type": {
        "name": "Trigger Type",
        "description": "The type of solar event to trigger on"
      },
      "enabled": {
        "name": "Enabled",
        "description": "Whether this trigger is currently active"
      },
      "offset_minutes": {
        "name": "Offset (minutes)",
        "description": "Minutes before (-) or after (+) the solar event. For sunrise triggers, use 0 for automatic timing based on total zone duration."
      },
      "azimuth_angle": {
        "name": "Azimuth Angle (degrees)",
        "description": "Solar azimuth angle in degrees where 0=North, 90=East, 180=South, 270=West"
      },
      "account_for_duration": {
        "name": "Account for Duration",
        "description": "When enabled, irrigation will start early enough to finish at the specified time. When disabled, irrigation will start exactly at the specified time."
      }
    },
    "dialog": {
      "add_title": "Add Irrigation Start Trigger",
      "edit_title": "Edit Irrigation Start Trigger",
      "cancel": "Cancel",
      "save": "Save",
      "delete": "Delete"
    },
    "no_triggers": "No irrigation start triggers configured. The system will use the default behavior (sunrise with total zone duration). Add triggers to customize when irrigation starts.",
    "offset_auto": "Auto (calculated from total zone duration)",
    "confirm_delete": "Are you sure you want to delete the trigger '{name}'?",
    "validation": {
      "name_required": "Trigger name is required",
      "azimuth_invalid": "Azimuth angle must be a valid number"
    },
    "help": {
      "sunrise_offset": "For sunrise triggers: Use negative values to start before sunrise, positive to start after. Set to 0 to automatically start early enough to complete all zones before sunrise.",
      "sunset_offset": "For sunset triggers: Use negative values to start before sunset, positive to start after sunset.",
      "azimuth_explanation": "Solar azimuth is the compass direction of the sun. 0°=North, 90°=East, 180°=South, 270°=West. You can enter any angle value (e.g., 450° = 90°, -30° = 330°). Use this to trigger irrigation when the sun reaches a specific position.",
      "multiple_triggers": "You can configure multiple triggers. Each enabled trigger will independently schedule irrigation starts."
    }
  },
  "weather_skip": {
    "title": "Weather-based Irrigation Skip",
    "description": "Automatically skip irrigation when precipitation is forecasted. This feature requires a weather service to be configured.",
    "threshold_label": "Precipitation Threshold",
    "threshold_description": "Minimum amount of precipitation (in mm) forecasted for today and tomorrow to skip irrigation."
  },
  "common": {
    "labels": {
      "enabled": "Enabled",
      "disabled": "Disabled", 
      "before": "before",
      "after": "after",
      "yes": "Yes",
      "no": "No"
    }
  }
}
